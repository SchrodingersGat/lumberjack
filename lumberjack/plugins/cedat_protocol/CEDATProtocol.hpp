// CEDATProtocol.hpp was generated by ProtoGen version 3.2.a

#ifndef _CEDATPROTOCOL_HPP
#define _CEDATPROTOCOL_HPP

// Language target is C++

/*!
 * \file
 * \mainpage CEDAT protocol stack
 * 
 * Binary protocol for compressed log data
 * 
 * The protocol API enumeration is incremented anytime the protocol is changed
 * in a way that affects compatibility with earlier versions of the protocol.
 * The protocol enumeration for this version is: 1
 * 
 * The protocol version is 0.1
 */

#include <stdbool.h>
#include <stdint.h>

//! \return the protocol API enumeration
#define getCEDATApi() 1

//! \return the protocol version string
#define getCEDATVersion() "0.1"

// Translation provided externally. The macro takes a `const char *` and returns a `const char *`
#ifndef translateCEDAT
    #define translateCEDAT(x) x
#endif

/*!
 * CEDAT packet definitions
 */
typedef enum
{
    CEDAT_FILE_INFO = 0x01,  //!< Log file version information
    CEDAT_NEW_VAR = 0x80,    //!< New data variable received
    CEDAT_DATAPOINT,         //!< Timestamped datapoint (floating point data)
    CEDAT_DATAPOINT_BOOLEAN  //!< Timestamped datapoint (boolean data)
} Packets;

//! \return the label of a 'Packets' enum entry, based on its value
const char* Packets_EnumLabel(int value);


// The prototypes below provide an interface to the packets.
// They are not auto-generated functions, but must be hand-written

//! \return the packet data pointer from the packet
uint8_t* getCEDATPacketData(void* pkt);

//! \return the packet data pointer from the packet, const
const uint8_t* getCEDATPacketDataConst(const void* pkt);

//! Complete a packet after the data have been encoded
void finishCEDATPacket(void* pkt, int size, uint32_t packetID);

//! \return the size of a packet from the packet header
int getCEDATPacketSize(const void* pkt);

//! \return the ID of a packet from the packet header
uint32_t getCEDATPacketID(const void* pkt);

#endif // _CEDATPROTOCOL_HPP
